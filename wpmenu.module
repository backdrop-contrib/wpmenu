<?php

  /**
   * @file
   * WordPress wpmenu clone.
   */

  use Drupal\Core\Render\Element;
  use \Drupal\Core\Url;
  use \Drupal\Core\Path\AliasManager;

  use Symfony\Component\Yaml\Yaml;

  /**
   * Implements hook_theme().
   */
  function wpmenu_theme($existing, $type, $theme, $path) {
    $items['wpmenu_top'] = array(
      'render element' => 'element',
    );
    $items['menu__wpmenu_top'] = array(
      'base hook' => 'menu',
      'variables' => array('items' => array(), 'attributes' => array()),
    );
    $items['wpmenu_left'] = array(
      'render element' => 'element',
    );
    $items['menu__wpmenu_left'] = array(
      'base hook' => 'menu',
      'variables' => array('items' => array(), 'attributes' => array()),
    );

    return $items;
  }

  /**
   * Implements hook_preprocess_HOOK() for HTML document templates.
   */
  function wpmenu_preprocess_html(&$variables) {
    $variables['attributes']['class'][] = 'wp-admin wp-core-ui no-js index-php auto-fold admin-bar branch-4-2 veriten-4-2-4 admin-color-fresh locale-en-us no-customize-support no-svg';
    $variables['html_attributes']->addClass('wp-toolbar');
  }

  /**
   * Implements hook_page_top().
   *
   * Add wpmenu to the top of the page automatically.
   */
  function wpmenu_page_top(array &$page_top) {
    $page_top['00wpmenu_wpwrap_top']['#markup'] = '<div id="wpwrap">';
    $page_top['wpmenu_left'] = [
      '#theme' => 'wpmenu_left',
      '#description' => 'left menu',
    ];
    $page_top['00wpmenu_wpcontent']['#markup'] = '<div id="wpcontent" class="layout-container">';
    $page_top['wpmenu_top'] = [
      '#theme' => 'wpmenu_top',
      '#description' => 'top menu',
      '#attached' => array(
        'library' =>  array(
          'wpmenu/wpmenu'
        ),
      ),
    ];
  }

  /**
   * Implements hook_page_top().
   *
   * Add wpmenu to the top of the page automatically.
   */
  function wpmenu_page_bottom(array &$page_bottom) {
    $page_top['00wpmenu_wpwrap_close']['#markup'] = "</div>";
    $page_top['00wpmenu_wpcontent_close']['#markup'] = "</div>";
  }
  /**
   * Prepares variables for administration toolbar templates.
   *
   * Default template: wpmenu-top.html.twig.
   *
   * @param array $variables
   *   An associative array containing:
   *   - element: An associative array containing the properties and children of
   *     the tray. Properties used: #children, #attributes and #bar.
   */
  function template_preprocess_wpmenu_top(&$variables) {
    global $base_path;
    $current_path = \Drupal::service('path.current')->getPath();
    $types = \Drupal\node\Entity\NodeType::loadMultiple();
    $content_types = array_keys($types);

    $variables['base_path'] = $base_path;
    $variables['module_path'] = drupal_get_path('module', 'wpmenu');
    $variables['current_path'] = $current_path;
    $variables['content_types'] = $content_types;
    $variables['username'] = $variables['user']->getAccount()->name;
    $variables['uid'] = $variables['user']->getAccount()->id();
    $variables['gravatar'] = 'https://www.gravatar.com/avatar/' . strtolower(trim(md5($variables['user']->getEmail())));
  }

  /**
   * Prepares variables for administration toolbar templates.
   *
   * Default template: wpmenu-left.html.twig.
   *
   * @param array $variables
   *   An associative array containing:
   *   - element: An associative array containing the properties and children of
   *     the tray. Properties used: #children, #attributes and #bar.
   */
  function template_preprocess_wpmenu_left(&$variables) {
    global $base_path;
//    $assembler = new UnroutedUrlAssembler();
    $current_path = \Drupal::service('path.current')->getPath();
    $module_path = drupal_get_path('module', 'wpmenu');
    $config = Yaml::parse(file_get_contents($module_path . '/wpmenu-left.yml'));

    $index = 0;
    $cindex = 0;
    $menu = [];
//    print_r($config['menu']);
    foreach ($config['menu'] as $menu_item) {
      foreach ($menu_item as $key => $value) {
        if ($key == 'separator') {
          $index++;
          $cindex = 0;
        }
        if ($key == 'children') {
//          print_r($value);
          foreach ($value as $child) {

            foreach ($child as $ckey => $cvalue) {
//              echo $ckey . ':' . $cvalue . "\n";
              if ($ckey == 'url') {
                $url = Url::fromUserInput($base_path . $cvalue);

                if ($url->isRouted()) {
                  $generator = Drupal::urlGenerator();
                  $path = $generator->generate($url->getRouteName());
                }
                $menu[$index]['children']['path'] = $path;
              } else {
                $menu[$index]['children'][$cindex][$ckey] = $cvalue;
              }
              $cindex++;
            }
          }

        } else {
          if ($key == 'url') {
            $url = Url::fromUserInput($base_path . $value);

            if ($url->isRouted()) {
              $generator = Drupal::urlGenerator();
              $path = $generator->generate($url->getRouteName());
            }
            $menu[$index]['path'] = $path;
          } else {
            $menu[$index][$key] = $value;
          }
        }

      }
    }
//    print_r($menu);exit();
    $variables['base_path'] = $base_path;
    $variables['current_path'] = $current_path;
    $variables['menu'] = $menu;
  }
